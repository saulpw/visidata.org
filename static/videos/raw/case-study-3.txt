VisiData Case Study #3: graphing calculator
Transcribed by E / @cel10e on 02/25/2020
[Timestamp: 00:00]
[Typing sounds.]
Saul Pwanson: Hello, this is Saul, and today I want to show you how to create a new dataset out of whole cloth; from nothing at all. For this, we're going to use VisiData a little like a graphing calculator.
[Timestamp: 00:17: Shift-A to create a new sheet]
First we create a new sheet, with the Shift-A command, and it'll ask us how many columns we want. So this will be 2 empty columns, as you see right here.
[TImestamp: 00:27: ^ (caret) to rename a column]
We can rename these columns with the caret (^) command. We'll edit the column header so that this is going to be the 'x' column, and this will be the 'y' column. 
[Timestamp: 00:38: 'a' to add a blank row]
And then we can add a row; we'll add it with the 'a' command. 
[Timestamp: 00:41: 'e' to edit]
And we can go ahead and edit this value to, I dunno, '1'. And then '2'. We can do this a lot, but this is kind of a pain. If you wanted to just enter something manually, that's how you would do it.
[Timestamp: 00:55: 'za' to add an empty column]
If you want to add a new blank column, after the fact, you can use the 'za' command, and then we have another blank column. Now we're going to make this a little more programmatic, and use the power of VisiData to make this easier for us. Let's stop here, let's delete this empty row, and hide this other column here. And so, let's say that we wanted to graph the sine function. We would start by adding a bunch of rows -- let's say we want to have 360 data points. 
[Timestamp: 01:26: 'ga' to add N rows]
So we would add 360 rows with the 'ga' command, to add a certain number of rows, and we're adding 360. And there we have it, 360 blank rows. And let's say that now we want to set the x-axis to the actual values 0 to 360.
[Timestamp: 01:43: SPACE to browse the menu of all commands]
If you don't know what the name of a command is, you can use the menu system that's been built in since version 1.1, with the spacebar. It'll show you all the commands that VisiData has, in a nice hierarchical menu format. The one we're looking for is under modify-, and we go over to set-column-, and it's actually modify- set-column- sequence. 
[Timestamp: 02:00: gz= to set column cells to Python sequence (modify-set-column-sequence)]
And you can see that there's the command right there: it's gz=, the command sequence to set the 'x' column for all 360 rows. It tells you what's going on in the help result of the Python sequence expression. We press Enter to do that command, and so we're going to set it to range(360), that's the Python range. And press Enter, and now you'll see that the 'x' column has those values in there. And we're going to type that column as a number -- boom. Now we've got that filled out. Now, we want to set the 'y' column to the sine, as we were talking about, of the x-axis here.
[Timestamp: 02:42: = (equals) to make a derived column from Python expression (not-modifiable)]
There's a couple of ways we can do that. First, we can use the = (equals) command, to make a new column by expression. This is a derived column. We can set it to the sine of the 'x' column here, and that will create a new derived column, with the sine of the x-axis there. As a derived column, it can't be edited. If you try to edit it, it'll let you try, but you can see there that it can't be changed. Let's say that we wanted to make this more like an actual dataset, and just start with the sine, for instance, in the 'y' column here.
[Timestamp: 03:15: g= to set column values to Python expression (modifiable)]
The other way we would do this is to use the g= command. Equals (=) created a new column, and g= is going to set this column to an expression we create. And so we can write math.sin(x) here, and this is going to set all the values in this 'y' column to that. And you can see the sine values are identical, in the two columns, but here if we actually want to change this value, we can set it to whatever we want to, and over there the value hasn't changed.
Let's say you wanted to plot this now, and see what this sine function looks like.
[Timestamp: 03:50: ! (bang) to set key column (x-axis on plot)]
So we're going to make the x column be the x-axis on the graph, by using the ! (bang) to make it the key column. 
[Timestamp: 03:55: . (dot) to plot numeric column]
And then we're going to plot the sine here, with . (dot). And we can see it doesn't look like the sine wave that we expect. The reason is that we are used to plotting the sine of x in degrees, but the Python sin(x) function, like your graphing calculator when it's in radians mode, even, plots it in radians. And we want it to be in degrees. So let's fix that.
[Timestamp: 04:25: g= to modify column values]
All we have to do is just set this 'x' column to be the radians. And so g= command here, to set every item in the x column to the radians of that. To convert to radians, we make x * 2 * math.pi/360, that's the standard formula for making radians into degrees. And we'll change the x-axis to that value. Now the column here is a number, which is an integer. So everything looks like it's 0. 
[Timestamp: 04:50: % (percent) to set column type to float]
We'll convert it with % (percent) to a floating point value, and you can see the actual floating point value there. And you can see that the math.sin(x) function updated automatically. And now we can plot this again, in the same way as before, with . (dot), and sure enough, that looks like the sine function. 
So at this point, let's look at the steps we took to get to this. 
[Timestamp: 05:16: Shift-D to open the cmdlog (Ctrl-S to save the .vd)]
We can look at the command log with Shift-D, and you can see all the various commands that we did so far. And we can save this off with Ctrl-S, and save it off as a .vd file. It's just a tab-separated file, like any other tab-separated file, but it does have these columns in it. And if we were to save this, we could replay it. I'll show you how to replay a file, because we can: one of the tests we have in here is graphing sine and cosine. We say 'no test' because that's actually done in automated testing, but it is actually there. 
[Timestamp: 05:52: replay with -w (wait)]
We could replay it with the -p option, replay option, but we can also specify an amount to wait between every command with the -w option here. Let's put it on a half-second. If we replay this now, this test is basically exactly what we did, except very streamlined. Now we have a half-second between every one of the sixteen steps in this thing, as it's figuring out what it wants to plot. And then, at the end, there it is -- the sine and the cosine both in the same graph. And then we can interact with it, just like we would normally. We can start using VisiData from here, for instance, press 1 to turn the layers on and off. And we can go back to the data sheet, and even look at the command log to see what happened from that point on.
And so there we go, that is how to make data out of nothing at all! Thanks a lot for watching, and I'll see you next time.