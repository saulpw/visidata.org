"VisiData Case Study #1: summing donation data from a webpage"
Transcribed by E / @cel10e on 12/11/19
[Timestamp: 00:00]
[Typing sounds.]
Saul Pwanson: Hello again, this is Saul. I'm here to show more features of VisiData: more ways VisiData can be used. 
I came across this book called "Reverse Engineering for Beginners," written by Dennis Yurichev. It seems like it's a pretty good book; he's got a bunch of information about it, reviews and such, and he also lists the donors who have supported him. I actually really appreciate his transparency here, that he will share all this information on his website. It made me curious as to how much money had been donated to him overall.
So you'll notice that this information here is just kind of in a single line. It's actually not that bad, but it's not in a form that we could easily do something with. So we're going to use VisiData to pick it apart, and try to do a sum of how much money was donated to him. 
[Timestamp: 01:00: pipe stdin to vd]
So let's quit out of this. I'm gonna cut and paste this into our terminal window here and pipe it into VisiData directly, and now VisiData has that as one of its lines. If we reduce this column to just a few characters here, you can see it's actually quite a long field. If you wanted to view the field and see all the contents of it, you can edit it, and you can scroll around across the whole thing if you really wanted to. 
[Timestamp: 01:27: Ctrl-O in any edit field to open it with own $EDITOR]
But you can also press control-O to open a single editing cell. This works on any input line. And that will open it in your own editor: in this case it's vim, in the terminal. And so you can see the entire contents. You can actually make edits and save them off, and it'll be reflected back in the edit if you wanted to. Right now I'm just going to quit out of this and cancel the edit, because I think everything's fine. 
What we want to do, though, is split up that one line according to the individual donations. 
[Timestamp: 02:01: ':' (colon) to split]
Each donation is separated by a comma, so we're going to use the split command, which is : (colon), and the split regex is just a comma. That will create columns for every individual donation. 
[Timestamp: 02:18: 'd' to delete the current row]
Now we're going to hide this first column, and we're going to remove the bottom two rows, which are just cruft left over from the echo. And now we've got every donation in its own cell, which is a great start. This is a horizontal form of the data, but we want the data to be in a vertical form, because that's what VisiData expects, and it will make our lives a lot easier.
[Timestamp: 02:38: Shift-M to melt (like unpivot)]
So we're going to use a command in VisiData called 'melt': it's like an un-pivot, since it takes daata from a horizontal form and swings it down into a vertical form. So you can now see the column names on the left, and the cell values on the right. And now we're ready to go. 
[Timestamp: 02:59: ; (semicolon) to match by regex capture group]
We can go over here to the value and we're going to use another command, on the ; (semicolon) key, that matches according to regex. We're going to pull out the donation amount from within the parentheses, by constructing a regex here. And this is just a standard regex: everything inside parentheses. We want to use a capture group, so here's the inner set of parentheses here. And now everything inside parentheses is going to be pulled into a new column, and there we go. There's that column. 
If we wanted to, we could just sum up this set of numbers. It wouldn't be very meaningful, because they're all in different currency units, but we could do it.
[Timestamp: 03:35: $ (dollar sign) to type column as "currency" (a dirty float)]
There is a type, it's on $ (dollar sign), which I call a currency type, but it's really just a dirty float: it takes the initial non-numeric characters and the trailing non-numeric characters and strips them off, and converts it to a float without that. So $ (dollar sign) converts the column to that. The cells that have a symbol in the middle can't be converted, they're just errors, but we'll ignore those for now. And so now we can deal with this as just a column of numbers. 
If you remember from last time, we used the + (plus) to put an aggregator on a column, which then shows up in future sheets. 
[Timestamp: 04:12: z+ to apply an aggregator to the current column and show result]
That's the + (plus) command, but here we're going to use the z+ command, which applies an aggregator to the current column and shows the result immediately. And so if we want to sum up the current column, we use the z+ sum, and there we go. This is about 4,300 units of currency. Again, it's not very meaningful, because they're all in different currencies. Since they are in different currencies, though, I went ahead and made a function called USD. It takes a number and a currency code or currency symbol, and converts it into US dollars based on the current day's currency rates.
[Timestamp: 04:45: ~ (tilde) to type column as a string]
So let's convert this back to a string: this is the ~ (tilde) command, because it looks like a string to me. That converts it back to a string, like it originally was. 
[Timestamp: 04:55: = (equal) to create a new column by Python expression]
And now we're going to use the USD function on this Value_re0 column, and that's going to do that calculation. I'm going to convert this USD into a float type, and now we can see that, for instance, this €50 Euros is actually $61 dollars in US money. And others that were already in US money just remain the same. Now we can do the same z+ sum as we did before, and see the value in US dollars as of today's rates. And that's about $1,470 dollars worth of value: that's the total donations he got from people for his book. It's not quite the total, because we're missing the ones with errors and such. We could do some more things to make that better, but this is a rough general calculation. 
Anyway, that's a pretty straightforward workflow. Thanks very much for using VisiData, and I will see you next time!
[Timestamp: 05:52]