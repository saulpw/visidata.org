VisiData Case Study #4: directory browser
Transcribed by E / @cel10e on 03/19/2020
[Timestamp: 00:00]
[Typing sounds.]
Saul Pwanson: Hello again, this is Saul. Today, I'm going to show you a change that we introduced in version 1.2 of VisiData: an expanded file and directory browser. This here is a directory of pieces by Chopin, who is one of my favorite composers. Firstly, you can see that I've added a directory column. By default, it used to only show the current directory, but now it recursively dives into the whole thing, and shows all files under the directory, including in all sub-directories. Secondly and more importantly, any field here is now editable. In fact, if I wanted to rename a file, I would just go ahead and edit this field, rename it to whatever I want, enter it, and then the filename has been edited in memory. You can see that it's been colored yellow here, which means it hasn't been saved yet.
[Timestamp: 01:03: Ctrl-S to save all changes and deletions to disk]
There's a separate commit step for when you want to save something; you press Ctrl-S, and that will save your changes to disk.
[Timestamp: 01:10: Ctrl-R to reload values from disk]
Or, if you want to not save it, and you want to blow away the changes that you've made in memory, you can press Ctrl-R. Pressing Ctrl-R will reload the entire directory, and you can see the changes have been blown away.
Now, let's say that we wanted to change the size. We can do that similarly, we can change the size to some other number, by putting a bunch of stuff in there. And that's going to either truncate the file or expand the file, depending on whether the new size is bigger or smaller than before. We can also edit the modification time for some things.
[Timestamp: 01:45: bulk editing also works]
And in fact, we can edit more than one thing at a time, we can also edit things in bulk. If we wanted to, for instance, change the modification time for all the ballads, we can select the ballads, and then go to the modification time, and use the bulk edit g-e command and change it to some date in the future, let's say 2019-8-26. And when we save this directory sheet, those changes will all be affected. So we press Ctrl-S, and they've all been changed.
[Timestamp: 02:15: explain modtime change after size update]
Now, this one up here is a little bit funny -- you'll notice that the modification time is still highlighted. That's because we had the modification time in memory as this older value. But then once we changed the size, it automatically updated the modification time to today's date, but in memory it still thinks of it as the older value. So if we reload, we'll see today's date, and if we do another save on this row, then we'll save the old modification time. I'm just going to reload here, and you can see that it goes to today's date. 
So, be very careful with this functionality -- if you don't ever press Ctrl-S, you have nothing to worry about, all the changes are only in memory. But once you do press Ctrl-S, you can do some serious damage to the files if you've made the wrong changes. So please do be careful about that. 
But like I said before, every single field on here is editable, including the directory here. 
[Timestamp: 03:04: editing 'directory' field moves files]
Let's say you want to move files. For instance, I want to move all of the files from 'Piano Classics Vol.1' up to the main level. There's five of them here. I would just do g-e to edit them all, and then set them all to nothing, and then they will have moved up there if I press Ctrl-S. I'll press Ctrl-S, and lo and behold, they've been moved. 
[Timestamp: 03:23: owner, group, mode are hidden columns]
One other thing here, if we look at the columns sheet for this directory. There are three columns at the end here that are hidden by default. If we select them and then change them to be unhidden, then you can see on this sheet that they appear - there they are. We can now see the owner, and the group. Basically, these are all the fields that also show up in LS -- minus L. You can also edit them here, too, if you have the appropriate permissions. So, you have to be running this as root, but if you are, then you can select a bunch of files and mass-edit the owners of those files to another symbolic name for that user. So, this is some pretty powerful stuff we've got here. 
[Timestamp: 04:07: 'g*' (new in 1.2) like '*' but applies transform in place]
Here's another brief example: we canuse another new command that I've got in here, g* (g-star). It's very similar to the * command, except that instead of creating a new column, it actually applies the edits in place. So let's say we wanted to rename all these files to remove all the spaces, which is a common thing people want to do with their media collections. So we would press g*, and then give it space and slash, which means we'll take all the spaces and convert them to nothing at all, and run that. Now if we press Ctrl-S, all the files will be saved and renamed to have no spaces in them. 
So those are the main workflows on the directory sheet. I hope that these are useful to you. If you do find them useful, please let me know; if you have any other questions or suggestions to make the workflows even better, I would also appreciate those. Otherwise, thank you very much for using VisiData, and I'll see you next time.